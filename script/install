#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"
if type brew &> /dev/null; then
    type xcrun &> /dev/null && \
        export CFLAGS="-I$(xcrun --show-sdk-path)/usr/include -I$(brew --prefix openssl)/include"
    export LDFLAGS="-L$(brew --prefix openssl)/lib"
fi

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_files () {
  info "installing $1"

  overwrite_all=true
  backup_all=false
  skip_all=false

  for full_source in $2
  do
    echo $full_source
    source=`basename $full_source '.symlink'`
    dest=`eval echo $3`

    [ -L $dest ] && [ `readlink $dest` = $full_source ] && continue

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: $source, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $full_source $dest
      else
        success "skipped $full_source"
      fi

    else
      link_files $full_source $dest
    fi

  done
}

concat_config () {
  info "combining config files\n"

  $DOTFILES_ROOT/script/concat-config
}

# Ensure submodules are updated
git submodule update --init --recursive --depth 1

install_files 'dotfiles' "`find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`" "$HOME/.\$source"

mkdir -p $HOME/bin
install_files 'binaries' "`find $DOTFILES_ROOT -mindepth 2 -maxdepth 3 -path '*/bin/*'`" "$HOME/bin/\$source"

mkdir -p $HOME/.config
install_files 'config' "`find $DOTFILES_ROOT -mindepth 3 -maxdepth 3 -path '*/config/*' -type d`" "$HOME/.config/\$source"

make -C $(readlink -f $(dirname `realpath $0`))/.. -s -j2

concat_config

echo ''
echo '  All installed!'
